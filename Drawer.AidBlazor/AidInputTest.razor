@using System.Linq.Expressions
@typeparam T

<div style="display:flex; flex-direction:column;">
    <MudTextField Immediate="true"
                  For="@For"
                  Validation="ValidateAllowedValue"
                  Label="계층" T="T" ValueChanged="@TextField_ValueChanged">

    </MudTextField>
    <MudPopover RelativeWidth="true"
                Open="@_isOpen"
                Fixed="true"
                MaxHeight="@MaxHeight"
                AnchorOrigin="Origin.BottomCenter"
                TransformOrigin="Origin.TopCenter">
        <MudList Clickable="true">
            @{
                int index = 0;
                foreach (var item in _filteredItemList)
                {
                    <MudListItem Text="@item" Value="@item" />
                    index++;
                }
            }
        </MudList>
    </MudPopover>
    <MudOverlay Visible="_isOpen" OnClick="@ToggleMenu" @ontouchstart="@ToggleMenu" LockScroll="true" />
</div>


@code {
    [Parameter] public Func<T, string> ValidateAllowedValue { get; set; }
    [Parameter] public Expression<Func<T>> For { get; set; }

    bool _isOpen;
    int MaxHeight = 400;

    string[] _filteredItemList = new string[]
    {
        "ab", "cd", "ef", "gkjldjf" , "sdfds"
    };

    private void TextField_ValueChanged(T value)
    {
        _isOpen = true;
    }

    void ToggleMenu()
    {
        _isOpen = !_isOpen;
    }

}