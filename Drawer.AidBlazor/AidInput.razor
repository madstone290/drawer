@typeparam T

<div>
    <div style="display:flex; flex-direction:column;">
        <MudInput T="@T"
                  Immediate="false"
                  InputType="InputType.Text"
                  @bind-Value="@Value"
                  @onfocus="OnFocus"
                  @onblur="OnBlur"
                  DisableUnderLine="!showUnderline">
              
        </MudInput>
    </div>
    <MudText Color="Color.Error" Typo="Typo.overline">@_error</MudText>
</div>


@code {
    private T? _value;
    private string? _error;
    private bool showUnderline;

    [Parameter]
    public T? Value
    {
        get => _value;
        set
        {
            if (EqualityComparer<T>.Default.Equals(_value, value))
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);

            _error = Validate?.Invoke(value);
        }
    }

    [Parameter] public EventCallback<T?> ValueChanged { get; set; }

    /// <summary>
    /// 값 유효성을 검사한다.
    /// </summary>
    [Parameter] public Func<T?, string>? Validate { get; set; }

    [Parameter] public bool Visible { get; set; } = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _error = Validate?.Invoke(Value);
            StateHasChanged();
        }

    }

    private void OnFocus()
    {
        showUnderline = true;
    }

    private void OnBlur()
    {
        showUnderline = false;
    }
}
