@using System.Linq.Expressions
<MudDatePicker @ref="_picker"
               @bind-Date="@Date"
               @bind-Text="@Text"
               Label="@Label"
               For="@For"
               Editable="true">
    <PickerActions>
        <MudButton Variant="Variant.Filled" Color="@Color.Info" OnClick="@Today_Click">오늘</MudButton>
        <MudButton Variant="Variant.Filled" Color="@Color.Secondary" OnClick="@Cancel_Click">취소</MudButton>
        <MudButton Variant="Variant.Filled" Color="@Color.Primary" OnClick="@Ok_Click">확인</MudButton>
    </PickerActions>
</MudDatePicker>
@code {
    private MudDatePicker _picker = null!;

    private DateTime? _date;
    private string? _text;

    [Parameter]
    public DateTime? Date
    {
        get => _date;
        set
        {
            if (EqualityComparer<DateTime?>.Default.Equals(_date, value))
                return;
            _date = value;
            DateChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<DateTime?> DateChanged { get; set; }

    [Parameter]
    public string? Text
    {
        get => _text;
        set
        {
            if (EqualityComparer<string?>.Default.Equals(_text, value))
                return;
            _text = value;
            TextChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<string?> TextChanged { get; set; }

    [Parameter] public string? Label { get; set; }
    [Parameter] public Expression<Func<DateTime?>>? For { get; set; }


    private async void Today_Click()
    {
        await _picker.GoToDate(DateTime.Today);
    }

    private void Cancel_Click()
    {
        _picker.Close(false);
    }

    private void Ok_Click()
    {
        _picker.Close();
    }
}
