@using MudBlazor.Services
@implements IAsyncDisposable

@if (!Visible)
    return;

<MudButton Variant="@Variant.Filled"
           IconColor="@Color.Surface"
           Size="@Size"
           Color="@Color"
           Href="@Href"
           Disabled="@(!Enabled)"
           StartIcon="@StartIcon"
           OnClick="@OnClick"
           DisableElevation="@true">
    @ChildContent
</MudButton>

@code {
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <summary>
    /// 화면 크기에 맞춰 사이즈 변경 여부
    /// </summary>
    [Parameter] public bool AutoResize { get; set; } = true;
    /// <summary>
    /// 버튼 활성화 상태
    /// </summary>
    [Parameter] public bool Enabled { get; set; } = true;
    [Parameter] public Color Color { get; set; }
    [Parameter] public Size Size { get; set; } = Size.Medium;
    [Parameter] public string? StartIcon { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public string? Href { get; set; }

    [Parameter]
    public Func<Breakpoint, Size> SizeFunc { get; set; } = new Func<Breakpoint, Size>((bp) =>
    {
        switch (bp)
        {
            case Breakpoint.Xs:
                return Size.Small;
            default:
                return Size.Medium;
        }
    });

    /// <summary>
    /// BreakpointListener 구독 ID. 구독해지에 사용한다.
    /// </summary>
    private Guid? _subscriptionId;

    [Inject]
    public IBreakpointService BreakpointListener { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoResize)
        {
            var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
            {
                Size = SizeFunc.Invoke(breakpoint);
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
                {
                    ReportRate = 250,
                    NotifyOnBreakpointOnly = true,
                });

            _subscriptionId = subscriptionResult.SubscriptionId;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (_subscriptionId.HasValue)
            await BreakpointListener.Unsubscribe(_subscriptionId.Value);
    }
}

