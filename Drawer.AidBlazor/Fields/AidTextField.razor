@using System.Linq.Expressions
@implements IValidation
@implements IAsyncDisposable

<MudTextField @ref="_fieldReference"
              @attributes="@Attributes"
              T="@string"
              Class="@Class"
              Label="@Label"
              Immediate="@Immediate"
              InputType="InputType.Text"
              AutoFocus="@AutoFocus"
              @bind-Value="@Value"
              @onfocus="OnFocus"
              @onblur="OnBlur"
              DisableUnderLine="@(DisableUnderLine || !_showUnderline)">
</MudTextField>


@code {
    private MudTextField<string>? _fieldReference;
    private string? _value;
    private bool _showUnderline = true;

    private string Class
    {
        get => new ClassBuilder()
            .Add("aid-field")
            .AddIf("aid-field-no-label", string.IsNullOrWhiteSpace(Label))
            .Build();
    }

    private Dictionary<string, object> Attributes
    {
        get
        {
            Dictionary<string, object> _attributes = new();
            if (For != null)
                _attributes.Add("For", For);
            else if (Validation != null)
                _attributes.Add("Validation", Validation);
            return _attributes;
        }
    }

    [CascadingParameter] public IValidationContainer? ValidationContainer { get; set; }

    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (EqualityComparer<string>.Default.Equals(_value, value))
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// 값 유효성을 검사한다.
    /// </summary>
    [Parameter] public Func<string?, string?>? Validation { get; set; }

    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool AutoFocus { get; set; } = false;
    [Parameter] public bool DisableUnderLine { get; set; }
    [Parameter] public bool DisableUnderLineOnBlur { get; set; }

    [Parameter] public Expression<Func<string>>? For { get; set; }

    /// <summary>
    /// 컴포넌트 생성 후 유효성 검사 여부
    /// </summary>
    [Parameter] public bool InitialValidation { get; set; } = false;

    protected override void OnInitialized()
    {
        if (ValidationContainer != null)
        {
            ValidationContainer.AddValidation(this);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialValidation && _fieldReference != null)
            {
                await _fieldReference.Validate();
            }
        }
    }

    private void OnFocus()
    {
        if (DisableUnderLine)
        {
            _showUnderline = false;
        }
        else
        {
            _showUnderline = true;
        }

    }

    private void OnBlur()
    {
        if (DisableUnderLine)
        {
            _showUnderline = false;
        }
        else
        {
            if(DisableUnderLineOnBlur)
                _showUnderline = false;
        }
    }

    async Task<string?> IValidation.ValidateAsync()
    {
        if (_fieldReference == null)
            return null;

        await _fieldReference.Validate();
        return _fieldReference.GetErrorText();
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (ValidationContainer != null)
            ValidationContainer.RemoveValidation(this);

        return ValueTask.CompletedTask;
    }
}
