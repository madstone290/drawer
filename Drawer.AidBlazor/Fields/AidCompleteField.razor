@typeparam TValue
@using System.Linq.Expressions
@implements IValidation
@implements IAsyncDisposable

<div style="display:flex; flex-direction:column;">
    <MudTextField @ref="_fieldReference"
                  @attributes="Attributes"
                  T="string"
                  Class="@Class"
                  Immediate="@Immediate"
                  Label="@Label"
                  Disabled="@Disabled"
                  DisableUnderLine="@(DisableUnderLine && !_isInputFocused)"
                  Value="@FieldText"
                  ValueChanged="@TextField_ValueChanged"
                  OnKeyDown="TextField_KeyDown"
                  OnKeyUp="TextField_KeyUp"
                  @onblur="@TextField_Blur"
                  @onfocus="@TextField_Focus">

    </MudTextField>
    <MudPopover RelativeWidth="true"
                Open="@_isOpen"
                Fixed="true"
                MaxHeight="@MaxHeight"
                AnchorOrigin="Origin.BottomCenter"
                TransformOrigin="Origin.TopCenter">
        <MudList Clickable="true" @bind-SelectedValue="_selectedListItemValue">
            @{
                if (_filteredItemValues != null)
                {
                    int index = 0;
                    foreach (var item in _filteredItemValues)
                    {
                        Debug($"Creating item {item}");
                        <MudListItem id="@GetListItemId(index)" Text="@item" Value="@item" OnClick="@ListItem_Click" />
                        index++;
                    }
                }
            }
        </MudList>
    </MudPopover>
    <MudOverlay AutoClose="true" @bind-Visible="_isOpen" />
</div>


@code {

    public enum BindMode
    {
        Text,
        Value
    }

    private MudTextField<string>? _fieldReference;

    /// <summary>
    /// 컴포넌트 식별용 아이디
    /// </summary>
    private readonly string _componentId = Guid.NewGuid().ToString();

    private string Class
    {
        get => new ClassBuilder()
            .Add("aid-field")
            .AddIf("aid-field-no-label", string.IsNullOrWhiteSpace(Label))
            .Build();
    }

    private string? _fieldText;

    /// <summary>
    /// 인풋 포커스 여부
    /// </summary>
    private bool _isInputFocused;

    /// <summary>
    /// 리스트 렌더링 여부
    /// </summary>
    private bool _isListRendering;

    /// <summary>
    /// 메뉴 오픈 여부
    /// </summary>
    private bool _isOpen;

    /// <summary>
    /// 리스트 아이템 선택여부.
    /// 엔터키 혹은 마우스클릭을 통해 변경된다.
    /// </summary>
    private bool _isItemChosen;

    /// <summary>
    /// 리스트에서 선택된 아이템 인덱스.
    /// 인덱스를 지정하고 메뉴 재렌더링 후에 해당 인덱스에 해당하는 아이템 값을 선택한다.
    /// </summary>
    private int _selectedListItemIndex;

    /// <summary>
    /// 리스트에서 선택된 아이템 값
    /// </summary>
    private object? _selectedListItemValue;

    /// <summary>
    /// 메뉴리스트에서 필터링된 아이템 값 목록
    /// </summary>
    private List<string>? _filteredItemValues;

    private Dictionary<string, object> Attributes
    {
        get
        {
            Dictionary<string, object> _attributes = new();
            if (For != null)
                _attributes.Add("For", For);
            else if (Validation != null)
                _attributes.Add("Validation", Validation);
            return _attributes;
        }
    }


    [Inject] public IScrollManager ScrollManager { get; set; } = null!;

    [CascadingParameter] public IValidationContainer? ValidationContainer { get; set; }

    [Parameter] public bool Immediate { get; set; } = true;
    /// <summary>
    /// 컴포넌트 생성 후 유효성 검사 여부
    /// </summary>
    [Parameter] public bool InitialValidation { get; set; } = true;
    [Parameter] public bool DisableUnderLine { get; set; }
    [Parameter] public Func<string, string>? Validation { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public int MaxHeight { get; set; } = 200;
    [Parameter] public Expression<Func<string>>? For { get; set; }
    [Parameter] public BindMode Mode { get; set; } = BindMode.Text;
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>
    /// 텍스트 아이템 값 목록
    /// </summary>
    [Parameter] public List<string>? TextItemList { get; set; }

    /// <summary>
    /// Text -> Value 변환 함수
    /// </summary>
    [Parameter] public Func<string?, TValue?>? TextToValueFunc { get; set; }

    /// <summary>
    /// Value -> Text 변환 함수
    /// </summary>
    [Parameter] public Func<TValue, string?>? ValueToTextFunc { get; set; }

    private TValue? _value;
    private string? _text;

    private string? FieldText
    {
        get => _fieldText;
        set
        {
            if (EqualityComparer<string>.Default.Equals(_fieldText, value))
                return;
            _fieldText = value;

            Text = value;
            Value = TextToValueFunc == null ? default : TextToValueFunc(value);
        }
    }

    [Parameter]
    public TValue? Value
    {
        get => _value;
        set
        {
            if (EqualityComparer<TValue>.Default.Equals(_value, value))
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);

            if(Mode == BindMode.Value)
                FieldText = ValueToTextFunc == null ? value?.ToString() : ValueToTextFunc.Invoke(value);
        }
    }
    [Parameter]
    public string? Text
    {
        get => _text;
        set
        {
            if (EqualityComparer<string>.Default.Equals(_text, value))
                return;
            _text = value;
            TextChanged.InvokeAsync(value);

            if(Mode == BindMode.Text)
                FieldText = value;
        }
    }

    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }

    protected override void OnInitialized()
    {
        if (ValidationContainer != null)
            ValidationContainer.AddValidation(this);
    }

    private int RenderCount = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialValidation)
            {
                await _fieldReference.Validate();
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Debug($"{RenderCount++} OnAfterRender");
        if (_isListRendering)
        {
            Debug($"_isListRendering");
            // 아이템 목록이 갱신된 후 아이템을 선택한다.
            if (_filteredItemValues != null && _selectedListItemIndex < _filteredItemValues.Count)
            {
                Debug($"_filteredItemValues != null");
                _selectedListItemValue = _filteredItemValues[_selectedListItemIndex];
                ScrollToListItem(_selectedListItemIndex);
            }
            _isListRendering = false;
        }

    }

    private void TextField_Blur()
    {
        _isInputFocused = false;
    }

    private void TextField_Focus()
    {
        _isInputFocused = true;
        ShowMenu();
    }

    private async void ListItem_Click()
    {
        _isItemChosen = true;
        await _fieldReference.SetText(Convert.ToString(_selectedListItemValue));
        _isOpen = false;
    }

    private async Task TextField_ValueChanged(string value)
    {
        FieldText = value;

        if (_isItemChosen)
        {
            _isItemChosen = false;
        }
        else
        {
            ShowMenu();
        }
    }

    private void TextField_KeyDown(KeyboardEventArgs e)
    {
        // 탭이 포커스 이동하기 전에 이벤트를 처리한다
        if (e.Key == "Tab")
        {
            _isOpen = false;
        }
    }

    private void TextField_KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            TextField_KeyUp_Enter();
        }
        else if (e.Key == "ArrowUp")
        {
            TextField_KeyUp_ArrowUp();

        }
        else if (e.Key == "ArrowDown")
        {
            TextField_KeyUp_ArrowDown();
        }
    }

    private async void TextField_KeyUp_Enter()
    {
        // 드랍다운이 닫힌 경우 새로 연다.
        // 드랍다운이 열린 경우 선택된 아이템으로 텍스트를 변경한다.

        if (!_isOpen)
        {
            ShowMenu();
            return;
        }

        if (_selectedListItemValue != null)
        {
            _isItemChosen = true;
            await _fieldReference.SetText(Convert.ToString(_selectedListItemValue));
            _isOpen = false;
        }
    }

    private void TextField_KeyUp_ArrowUp()
    {
        if (!_isOpen || _filteredItemValues == null)
            return;

        _selectedListItemIndex--;
        if (_selectedListItemIndex < 0)
            _selectedListItemIndex = _filteredItemValues.Count - 1;

        _selectedListItemValue = _filteredItemValues[_selectedListItemIndex];
        ScrollToListItem(_selectedListItemIndex);
    }

    private void TextField_KeyUp_ArrowDown()
    {
        if (!_isOpen || _filteredItemValues == null)
            return;

        _selectedListItemIndex++;
        if (_filteredItemValues.Count <= _selectedListItemIndex)
            _selectedListItemIndex = 0;

        _selectedListItemValue = _filteredItemValues[_selectedListItemIndex];
        ScrollToListItem(_selectedListItemIndex);
    }

    /// <summary>
    /// 입력에 맞는 메뉴를 보여준다
    /// </summary>
    private void ShowMenu()
    {
        // 1. 아이템을 필터링. 선택할 아이템 인덱스 지정.
        // 2. 아이템 목록 렌더링
        // 3. 아이템 목록 렌더링이 완료되면 선택할 아이템 인덱스를 이용해서 다시 한번 렌더링

        if (TextItemList == null)
            return;
        Debug("ShowMenu");
        if (string.IsNullOrWhiteSpace(Text))
        {
            Debug("Value is null");
            _filteredItemValues = TextItemList.ToList();
        }
        else
        {
            Debug("Value is not null");
            _filteredItemValues = TextItemList.Where(item =>
                item.Contains(Text, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        Debug($"FilteredItem Count: {_filteredItemValues?.Count}");
        _isOpen = false;
        _isOpen = 0 < _filteredItemValues?.Count;


        // 첫번재 아이템을 선택한다
        _selectedListItemIndex = 0;

        // 리스트 요소가 렌더링되는지 식별한다
        _isListRendering = true;

        // 변경된 리스트아이템을 렌더링한다
        StateHasChanged();
    }

    private void ScrollToListItem(int index)
    {
        var listItemId = GetListItemId(index);

        ScrollManager.ScrollToListItemAsync(listItemId);
    }

    private string GetListItemId(int index)
    {
        return $"{_componentId}_item_{index}";
    }

    private void Debug(string message)
    {
#if DEBUG
    Console.WriteLine(message);
#endif
    }

    async Task<string?> IValidation.ValidateAsync()
    {
        // TextField 객체의 Validation을 실행하고 에러를 반환한다.
        await _fieldReference.Validate();
        return _fieldReference.GetErrorText();
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (ValidationContainer != null)
            ValidationContainer.RemoveValidation(this);

        return ValueTask.CompletedTask;
    }
}