@typeparam TKey
@implements IValidation
@implements IAsyncDisposable

<MudTextField @ref="_fieldReference"
              T="@string"
              Immediate="@Immediate"
              Class="@Class"
              Label="@Label"
              InputType="InputType.Text"
              Validation="@Validation"
              @bind-Value="@Value"
              @onfocus="OnFocus"
              @onblur="OnBlur"
              DisableUnderLine="!showUnderline">
</MudTextField>


@code {

    private MudTextField<string> _fieldReference = null!;
    private TKey? _key;
    private string? _value;
    private bool showUnderline;

   private string Class
    {
        get => new ClassBuilder()
            .Add("aid-field")
            .AddIf("aid-field-no-label", string.IsNullOrWhiteSpace(Label))
            .Build();
    }

    [CascadingParameter] public IValidationContainer? ValidationContainer { get; set; }

    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (EqualityComparer<string>.Default.Equals(_value, value))
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);

            if (KeyFunc != null)
                Key = KeyFunc(value);

        }
    }
    [Parameter]
    public TKey? Key
    {
        get => _key;
        set
        {
            if (EqualityComparer<TKey?>.Default.Equals(_key, value))
                return;
            _key = value;
            KeyChanged.InvokeAsync(value);
        }
    }


    [Parameter] public EventCallback<TKey?> KeyChanged { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>
    /// Value -> Key 변환 함수
    /// </summary>
    [Parameter] public Func<string?, TKey?>? KeyFunc { get; set; }

    /// <summary>
    /// 값 유효성을 검사한다.
    /// </summary>
    [Parameter] public Func<string?, string?>? Validation { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public bool Immediate { get; set; } = true;
    /// <summary>
    /// 컴포넌트 생성 후 유효성 검사 여부
    /// </summary>
    [Parameter] public bool InitialValidation { get; set; } = true;

    protected override void OnInitialized()
    {
        if (ValidationContainer != null)
        {
            ValidationContainer.AddValidation(this);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialValidation)
            {
                await _fieldReference.Validate();
            }
        }
    }


    private void OnFocus()
    {
        showUnderline = true;
    }

    private void OnBlur()
    {
        showUnderline = false;
    }

    async Task<string?> IValidation.ValidateAsync()
    {
        await _fieldReference.Validate();
        return _fieldReference.GetErrorText();
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (ValidationContainer != null)
            ValidationContainer.RemoveValidation(this);

        return ValueTask.CompletedTask;
    }
}
