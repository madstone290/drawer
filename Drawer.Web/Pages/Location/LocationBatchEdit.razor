@using Drawer.Contract.InventoryManagement
@using Drawer.Contract.Locations
@using Drawer.Web.Api.InventoryManagement
@using Drawer.Web.Authentication
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@using Drawer.Web.Pages.Location.Models;

@attribute [Route(Paths.LocationBatchEdit)]

<BatchEdit TitleText="위치 일괄 추가"
           TModel="LocationModel"
           HomePath="@Paths.LocationHome"
           ExcelFormName="위치-양식"
           SaveAsyncFunc="@Save"
           ExcelOptions="@_excelOptions"
           Validate="@Validate">

    <HeadRow>
        <MudTh Style="min-width:100px;">이름</MudTh>
        <MudTh Style="min-width:100px;">비고</MudTh>
        <MudTh Style="min-width:100px;">상위 위치</MudTh>
    </HeadRow>
    <BodyRow>
        <AidInputCell @bind-Value="context.Name"
                      Validate="@((_) => ValidateProperty(context, nameof(LocationModel.Name)))" />
        <AidInputCell @bind-Value="context.Note"
                      Validate="@((_) => ValidateProperty(context, nameof(LocationModel.Note)))" />
        <AidCompleteInputCell TValue="long"
                          ItemDictFunc="GetLocations"
                          Validate="@((_) => ValidateProperty(context, nameof(LocationModel.UpperLocationName)))"
                          @bind-Text="context.UpperLocationName"
                          @bind-Value="context.UpperLocationId" />
    </BodyRow>
</BatchEdit>

@code {
    private readonly LocationModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(LocationModel.Name), "이름")
        .AddColumn(nameof(LocationModel.Note), "비고")
        .AddColumn(nameof(LocationModel.UpperLocationName), "상위 위치")
        .Build();

    [Inject] public LocationApiClient LocationApiClient { get; set; } = null!;
    [Inject] public ILockService LockService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetLocations();
    }

    private async Task<Dictionary<string, long>> GetLocations()
    {
        var dict = await LockService.DoAsync<Dictionary<string, long>>(async () =>
        {
            var response = await LocationApiClient.GetLocations();

            var locationDict = new Dictionary<string, long>();
            if (Snackbar.CheckFail(response))
            {
                foreach (var location in response.Data.Locations)
                    locationDict[location.Name] = location.Id;
            }
            return locationDict;
        });
        return dict;
    }


    private async Task<bool> Save(IEnumerable<LocationModel> locations)
    {
        var content = new BatchCreateLocationRequest(locations.Select(x =>
            new BatchCreateLocationRequest.Location(x.UpperLocationId, x.Name!, x.Note)).ToList());
        
        var response = await LocationApiClient.BatchAddLocation(content);

        return Snackbar.CheckSuccessFail(response);
    }

    private bool Validate(LocationModel instance)
    {
        var result = _validator.Validate(instance);
        return result.IsValid;
    }

    private string? ValidateProperty(LocationModel instance, string property)
    {
        var msg = _validator.ValidateProperty(instance, property);
        return msg;
    }
}




