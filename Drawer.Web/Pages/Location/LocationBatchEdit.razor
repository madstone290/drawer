@using Drawer.Contract.Inventory
@using Drawer.Contract.Locations
@using Drawer.Web.Api.Inventory
@using Drawer.Web.Authentication
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@using Drawer.Web.Pages.Location.Models;

@attribute [Route(Paths.LocationBatchEdit)]

<CascadingValue IsFixed="true" Value="this">
    <BatchEdit TitleText="위치 일괄 추가"
               TModel="LocationModel"
               HomePath="@Paths.LocationHome"
               ExcelFormName="위치-양식"
               SaveAsyncFunc="@Save"
               ExcelOptions="@_excelOptions">
        <HeaderRow>
            <MudTh Style="min-width:100px;">상위 그룹</MudTh>
            <MudTh Style="min-width:100px;">이름</MudTh>
            <MudTh Style="min-width:100px;">비고</MudTh>
            <MudTh Style="min-width:100px;">그룹 구분</MudTh>
        </HeaderRow>
        <BodyRow>
            <MudTd>
                <AidCompleteInput TKey="long"
                                  DisableUnderLine="true"
                                  @bind-Key="context.ParentGroupId"
                                  @bind-Value="context.ParentGroupName"
                                  ItemValues="@(_locationGroups.Select(x=> x.Name).ToList())"
                                  KeyFunc="@((value) => _locationGroups.FirstOrDefault(x=> x.Name == value)?.Id ?? 0)"
                                  Validation="@((_) => ValidateProperty(context, nameof(LocationModel.ParentGroupName)))" />
            </MudTd>
            <MudTd>
                <AidInput @bind-Value="context.Name"
                          ExecuteInitialValidation="true"
                          Validation="@((_) => ValidateProperty(context, nameof(LocationModel.Name)))" />
            </MudTd>
            <MudTd>
                <AidInput @bind-Value="context.Note"
                          Validation="@((_) => ValidateProperty(context, nameof(LocationModel.Note)))" />
            </MudTd>
            <MudTd>
                <MudCheckBox @bind-Checked="context.IsGroup" />
            </MudTd>
        </BodyRow>
    </BatchEdit>
</CascadingValue>
@code {
    private readonly LocationModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(LocationModel.ParentGroupName), "상위 그룹")
        .AddColumn(nameof(LocationModel.Name), "이름")
        .AddColumn(nameof(LocationModel.Note), "비고")
        .AddColumn(nameof(LocationModel.IsGroup), "그룹 구분")
        .Build();

    [Inject] public LocationApiClient LocationApiClient { get; set; } = null!;
    [Inject] public ILockService LockService { get; set; } = null!;

    private List<GetLocationsResponse.Location> _locations = new();
    private List<GetLocationsResponse.Location> _locationGroups = new();

    protected override async Task OnInitializedAsync()
    {
        await GetLocations();
    }

    private List<IValidation> validations = new();
    internal void AddValidation(IValidation validation)
    {
        validations.Add(validation);
    }

    private async Task GetLocations()
    {
        await LockService.DoAsync<bool>(async () =>
        {
            var response = await LocationApiClient.GetLocations();

            if (Snackbar.CheckFail(response))
            {
                _locations.AddRange(response.Data.Locations.ToList());
                _locationGroups.AddRange(_locations.Where(x => x.IsGroup));

                _validator.LocationNames = _locationGroups.Select(x => x.Name).ToList();
            }

            return true;
        });
    }


    private async Task<bool> Save(IEnumerable<LocationModel> locations)
    {
        var content = new BatchCreateLocationRequest(locations.Select(x =>
            new BatchCreateLocationRequest.Location(x.ParentGroupId, x.Name!, x.Note, x.IsGroup)).ToList());

        var response = await LocationApiClient.BatchAddLocation(content);

        return Snackbar.CheckSuccessFail(response);
    }

    private string? ValidateProperty(LocationModel instance, string property)
    {
        var msg = _validator.ValidateProperty(instance, property);
        return msg;
    }
}




