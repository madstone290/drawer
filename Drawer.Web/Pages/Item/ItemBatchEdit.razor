@using System.Reflection
@using Drawer.Application.Services.Inventory.CommandModels
@using Drawer.Web.Api.Inventory
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@using System.Linq.Expressions
@attribute [Route(Paths.ItemBatchEdit)]

<BatchEdit TitleText="아이템 일괄 추가"
           TModel="ItemModel"
           HomePath="@Paths.ItemHome"
           ExcelFormName="아이템-양식"
           SaveAsyncFunc="@Save"
           ExcelOptions="_excelOptions">

    <HeaderRow>
        <MudTh Style="min-width:100px;">이름</MudTh>
        <MudTh Style="min-width:100px;">코드</MudTh>
        <MudTh Style="min-width:100px;">번호</MudTh>
        <MudTh Style="min-width:100px;">Sku</MudTh>
        <MudTh Style="min-width:100px;">계량 단위</MudTh>
    </HeaderRow>
    <BodyRow>
        <MudTd>
            <AidTextField @bind-Value="context.Name"
                          Validation="((_) => ValidateProperty(context, x => x.Name))" />
        </MudTd>
        <MudTd>
            <AidTextField @bind-Value="context.Code"
                          Validation="((_) => ValidateProperty(context, x => x.Code))" />
        </MudTd>
        <MudTd>
            <AidTextField @bind-Value="context.Number"
                          Validation="((_) => ValidateProperty(context, x => x.Number))" />
        </MudTd>
        <MudTd>
            <AidTextField @bind-Value="context.Sku"
                          Validation="((_) => ValidateProperty(context, x => x.Sku))" />
        </MudTd>
        <MudTd>
            <AidTextField @bind-Value="context.QuantityUnit"
                          Validation="((_) => ValidateProperty(context, x => x.QuantityUnit))" />
        </MudTd>
    </BodyRow>
</BatchEdit>

@code {
    private readonly ItemModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(ItemModel.Name), "이름")
        .AddColumn(nameof(ItemModel.Code), "코드")
        .AddColumn(nameof(ItemModel.Number), "번호")
        .AddColumn(nameof(ItemModel.Sku), "Sku")
        .AddColumn(nameof(ItemModel.QuantityUnit), "계량단위")
        .Build();


    [Inject] public ItemApiClient ItemApiClient { get; set; } = null!;

    private async Task<bool> Save(IEnumerable<ItemModel> items)
    {
        var itemListDto = items.Select(item =>
              new ItemCommandModel()
                  {
                      Name = item.Name,
                      Code = item.Code,
                      Number = item.Number,
                      Sku = item.Sku,
                      QuantityUnit = item.QuantityUnit
                  }).ToList();

        var response = await ItemApiClient.BatchAddItem(itemListDto);

        return Snackbar.CheckSuccessFail(response);
    }

    private string? ValidateProperty(ItemModel item, Expression<Func<ItemModel, object?>> expression)
    {
        return _validator.ValidateProperty(item, expression);
    }

}
