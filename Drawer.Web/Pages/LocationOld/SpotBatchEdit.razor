@using Drawer.Contract.Locations
@using Drawer.Web.Api.Locations
@using Drawer.Web.Authentication
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@using Drawer.Web.Pages.LocationOld.Models;

@attribute [Route(Paths.SpotBatchEdit)]

<BatchEdit TitleText="자리 일괄 추가"
           TModel="SpotModel"
           HomePath="@Paths.SpotHome"
           ExcelFormName="자리-양식"
           SaveAsyncFunc="@Save"
           ExcelOptions="@_excelOptions"
           Validate="@Validate">

    <HeadRow>
        <MudTh Style="min-width:100px;">이름</MudTh>
        <MudTh Style="min-width:100px;">비고</MudTh>
        <MudTh Style="min-width:100px;">구역</MudTh>
    </HeadRow>
    <BodyRow>
        <MudTd>
            <AidInput @bind-Value="context.Name"
                      Validation="@((_) => ValidateProperty(context, nameof(SpotModel.Name)))" />
        </MudTd>
        <MudTd>

        <AidInput @bind-Value="context.Note"
                      Validation="@((_) => ValidateProperty(context, nameof(SpotModel.Note)))" />
        </MudTd>
    </BodyRow>
</BatchEdit>

@code {
    private readonly SpotModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(SpotModel.Name), "이름")
        .AddColumn(nameof(SpotModel.Note), "비고")
        .AddColumn(nameof(SpotModel.ZoneName), "구역")
        .Build();

    [Inject] public SpotApiClient SpotApiClient { get; set; } = null!;
    [Inject] public ZoneApiClient ZoneApiClient { get; set; } = null!;
    [Inject] public ILockService LockService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetZones();
    }

    private async Task<Dictionary<string, long>> GetZones()
    {
        var dict = await LockService.DoAsync<Dictionary<string, long>>(async () =>
        {
            var zoneResponse = await ZoneApiClient.GetZones();

            var zoneDict = new Dictionary<string, long>();
            if (Snackbar.CheckFail(zoneResponse))
            {
                foreach (var Zone in zoneResponse.Data.Zones)
                    zoneDict[Zone.Name] = Zone.Id;
            }
            return zoneDict;
        });
        return dict;
    }


    private async Task<bool> Save(IEnumerable<SpotModel> spots)
    {
        var content = new BatchCreateSpotRequest(spots.Select(x =>
            new BatchCreateSpotRequest.Spot(x.ZoneId, x.Name!, x.Note)).ToList());

        var response = await SpotApiClient.BatchAddSpot(content);

        return Snackbar.CheckSuccessFail(response);
    }

    private bool Validate(SpotModel instance)
    {
        var result = _validator.Validate(instance);
        return result.IsValid;
    }

    private string? ValidateProperty(SpotModel instance, string property)
    {
        var msg = _validator.ValidateProperty(instance, property);
        return msg;
    }
}




