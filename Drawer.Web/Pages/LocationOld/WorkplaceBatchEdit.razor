@using System.Reflection
@using Drawer.Contract.Locations
@using Drawer.Web.Api.Locations
@using Drawer.Web.Pages.LocationOld.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@attribute [Route(Paths.WorkplaceBatchEdit)]

<BatchEdit TitleText="작업장 일괄 추가"
           TModel="WorkplaceModel"
           HomePath="@Paths.WorkplaceHome"
           ExcelFormName="작업장-양식"
           SaveAsyncFunc="@Save"
           ExcelOptions="_excelOptions"
           Validate="@Validate">

    <HeadRow>
        <MudTh Style="min-width:100px;">이름</MudTh>
        <MudTh Style="min-width:100px;">비고</MudTh>
    </HeadRow>
    <BodyRow>
        <AidInput @bind-Value="context.Name"
                      Validation="@((value) => ValidateProperty(context, nameof(ZoneModel.Name)))" />
        <AidInput @bind-Value="context.Note"
                      Validation="@((value) => ValidateProperty(context, nameof(ZoneModel.Note)))" />
    </BodyRow>
</BatchEdit>

@code {
    private readonly WorkplaceModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(WorkplaceModel.Name), "이름")
        .AddColumn(nameof(WorkplaceModel.Note), "비고")
        .Build();

    [Inject] public WorkplaceApiClient ApiClient { get; set; } = null!;

    private async Task<bool> Save(IEnumerable<WorkplaceModel> workplaces)
    {
        var content = new BatchCreateWorkplaceRequest(workplaces.Select(x =>
            new BatchCreateWorkplaceRequest.Workplace(x.Name, x.Note)).ToList());
        
            var response = await ApiClient.BatchAddWorkplace(content);

        return Snackbar.CheckSuccessFail(response);
    }

    private bool Validate(WorkplaceModel instance)
    {
        var result = _validator.Validate(instance);
        return result.IsValid;
    }

    private string? ValidateProperty(WorkplaceModel instance, string property)
    {
        var msg = _validator.ValidateProperty(instance, property);
        return msg;
    }
}
