@using Drawer.Contract.Locations
@using Drawer.Web.Api.Locations
@using Drawer.Web.Authentication
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Utils
@using Drawer.Web.Pages.LocationOld.Models;

@attribute [Route(Paths.ZoneBatchEdit)]

<BatchEdit TitleText="구역 일괄 추가"
           TModel="ZoneModel"
           HomePath="@Paths.ZoneHome"
           ExcelFormName="구역-양식"
           SaveAsyncFunc="@Save"
           ExcelOptions="@_excelOptions"
           Validate="@Validate">

    <HeadRow>
        <MudTh Style="min-width:100px;">이름</MudTh>
        <MudTh Style="min-width:100px;">비고</MudTh>
        <MudTh Style="min-width:100px;">작업장</MudTh>
    </HeadRow>
    <BodyRow>
          <MudTd>
            <AidInput @bind-Value="context.Name"
                      Validation="@((_) => ValidateProperty(context, nameof(ZoneModel.Name)))" />
        </MudTd>
        <MudTd>

        <AidInput @bind-Value="context.Note"
                      Validation="@((_) => ValidateProperty(context, nameof(ZoneModel.Note)))" />
        </MudTd>
    </BodyRow>
</BatchEdit>

@code {
    private readonly ZoneModelValidator _validator = new();
    private readonly ExcelOptions _excelOptions = new ExcelOptionsBuilder()
        .AddColumn(nameof(ZoneModel.Name), "이름")
        .AddColumn(nameof(ZoneModel.Note), "비고")
        .AddColumn(nameof(ZoneModel.WorkplaceName), "작업장")
        .Build();

    [Inject] public ZoneApiClient ZoneApiClient { get; set; } = null!;
    [Inject] public WorkplaceApiClient WorkplaceApiClient { get; set; } = null!;
    [Inject] public ILockService LockService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await GetWorkplaces();
    }

    private async Task<Dictionary<string, long>> GetWorkplaces()
    {
        var dict = await LockService.DoAsync<Dictionary<string, long>>(async () =>
        {
            var workplaceResponse = await WorkplaceApiClient.GetWorkplaces();

            var workplaceDict = new Dictionary<string, long>();
            if (Snackbar.CheckFail(workplaceResponse))
            {
                foreach (var workplace in workplaceResponse.Data.Workplaces)
                    workplaceDict[workplace.Name] = workplace.Id;
            }
            return workplaceDict;
        });
        return dict;
    }


    private async Task<bool> Save(IEnumerable<ZoneModel> zones)
    {
        var content = new BatchCreateZoneRequest(zones.Select(x =>
            new BatchCreateZoneRequest.Zone(x.WorkplaceId, x.Name!, x.Note)).ToList());
        
        var response = await ZoneApiClient.BatchAddZone(content);

        return Snackbar.CheckSuccessFail(response);
    }

    private bool Validate(ZoneModel instance)
    {
        var result = _validator.Validate(instance);
        return result.IsValid;
    }

    private string? ValidateProperty(ZoneModel instance, string property)
    {
        var msg = _validator.ValidateProperty(instance, property);
        return msg;
    }
}




