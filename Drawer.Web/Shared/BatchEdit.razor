@typeparam TModel where TModel : class, new()
@using Drawer.Web.Authentication
@using Drawer.Web.DataBinding
@using Drawer.Web.Pages
@using Drawer.Web.Pages.Item.Models
@using Drawer.Web.Services
@using Drawer.Web.Shared.Dialogs
@using Drawer.Web.Utils
@using System.Reflection
@implements IValidationContainer

<ContentTitle Text="@TitleText" />
<AuthorizeView Context="AuthorizeView" Policy="@Policies.CompanyMember">
    <NotAuthorized>
        <NeedCompany />
    </NotAuthorized>

    <Authorized>

        <AidToolBar>
            <AidButton Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       OnClick=@(() => Back_Click())>
                뒤로
            </AidButton>
            <AidButton Color="Color.Warning"
                       StartIcon="@Icons.Material.Filled.Clear"
                       OnClick=@(() => Cancel_Click())>
                초기화
            </AidButton>
            <AidButton Color="Color.Tertiary"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       OnClick=@(() => ExcelDownload_Click())>
                엑셀 폼 다운로드
            </AidButton>
            <AidButton Color="Color.Tertiary"
                       StartIcon="@Icons.Material.Filled.FileUpload"
                       OnClick=@(() => ExcelUpload_Click())>
                엑셀 업로드
            </AidButton>
            <AidButton Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick=@(() => NewRow_Click())>
                행 추가
            </AidButton>
            <AidButton Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Save"
                       OnClick=@(() => Save_Click())>
                저장
            </AidButton>
        </AidToolBar>

        <AidTable ReadOnly="false"
                  T="TModel"
                  UseRowSelection="false"
                  Items="@_modelList">

            <Header>
                <MudTHeadRow>
                    @HeaderRow
                </MudTHeadRow>
            </Header>
            <Row>
                <CascadingValue IsFixed="true" Value="this">
                    @if (BodyRow != null)
                    {
                        @BodyRow(context)
                    }
                </CascadingValue>
            </Row>

            <Footer>
                <MudTFootRow>
                    <MudTd colSpan="100">총 @(TotalRowCount)개의 행</MudTd>
                </MudTFootRow>
            </Footer>

        </AidTable>
    </Authorized>
</AuthorizeView>

@code {

    private readonly List<TModel> _modelList = new List<TModel>();

    public int TotalRowCount => _modelList.Count;

    public string ExcelFormFileName => ExcelFormName + ".xlsx";


    [Inject] public IExcelFileService ExcelFileService { get; set; } = null!;
    [Inject] public IBlazorComponentService BlazorComponentService { get; set; } = null!;

    /// <summary>
    /// 화면 타이틀
    /// </summary>
    [Parameter] public string TitleText { get; set; } = string.Empty;
    /// <summary>
    /// 뒤로가기에서 사용할 홈 경로
    /// </summary>
    [Parameter] public string HomePath { get; set; } = string.Empty;
    /// <summary>
    /// 엑셀폼 이름
    /// </summary>
    [Parameter] public string ExcelFormName { get; set; } = typeof(TModel).Name + "-Form";

    /// <summary>
    /// 헤드로우 렌더링요소
    /// </summary>
    [Parameter] public RenderFragment? HeaderRow { get; set; }
    /// <summary>
    /// 바디로우 렌더링 요소
    /// </summary>
    [Parameter] public RenderFragment<TModel>? BodyRow { get; set; }

    [Parameter] public EditMode ActionMode { get; set; }
    /// <summary>
    /// 데이터를 저장하고 결과를 반환하는 함수를 지정한다.
    /// 종료 여부를 반환한다.
    /// </summary>
    [Parameter] public Func<IEnumerable<TModel>, Task<bool>> SaveAsyncFunc { get; set; } = null!;

    /// <summary>
    /// 엑셀 읽기/쓰기에 사용할 옵션
    /// </summary>
    [Parameter] public ExcelOptions? ExcelOptions { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BlazorComponentService.TableResize();
        }
    }

    private void Back_Click()
    {
        NavManager.NavigateTo(HomePath);
    }

    private void Cancel_Click()
    {
        _modelList.Clear();
    }

    private async void ExcelDownload_Click()
    {
        await ExcelFileService.Download(ExcelFormFileName, new List<TModel>(), ExcelOptions);
    }

    async Task ExcelUpload_Click()
    {
        var newModelList = await ExcelFileService.Upload<TModel>(ExcelOptions);
        _modelList.AddRange(newModelList);
    }

    private void NewRow_Click()
    {
        _modelList.Add(new TModel());
    }

    private async Task Save_Click()
    {
        if (_modelList.Count == 0)
            return;

        bool isDataValid = true;
        foreach (var v in _validations)
        {
            var result = await v.ValidateAsync();
            isDataValid &= result == null;
        }

        if (!isDataValid)
        {
            Snackbar.Add("데이터가 유효하지 않습니다");
            return;
        }

        var success = await SaveAsyncFunc.Invoke(_modelList);
        if (success)
            NavManager.NavigateTo(HomePath);
    }

    private readonly List<IValidation> _validations = new List<IValidation>();
    void IValidationContainer.AddValidation(IValidation validation)
    {
        _validations.Add(validation);
    }

     void IValidationContainer.RemoveValidation(IValidation validation)
    {
        _validations.Remove(validation);
    }
}



